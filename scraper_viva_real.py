# -*- coding: utf-8 -*-
"""scraper_viva_real.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10gYKcjuiTH111ZVw6x_TEkQs54iMRpyj
"""

#!pip install requests_html
#!pip install html5lib
#!pip install bs4

from requests_html import HTMLSession
from bs4 import BeautifulSoup
import csv
import json
import pandas as pd
import numpy as np
from time import sleep
from random import randint
from datetime import datetime
from selenium import webdriver
import time



today = datetime.now()
mes = datetime.now().month
ano = currentYear = datetime.now().year
mes,ano

meses = (ano-2000)*12+mes
meses

url_inicial = 'https://www.vivareal.com.br/venda/ceara/caucaia/casa_residencial'

driver = webdriver.Chrome()
driver.get(url_inicial)
time.sleep(5)

session = HTMLSession()
r1=session.get(url_inicial)

sp = BeautifulSoup(r1.content, 'html5lib')
tot_anuncios = sp.find("strong", class_="results-summary__count js-total-records").text
tot_anuncios = int(tot_anuncios)
print(tot_anuncios)

anuncios_por_pagina = 36

if tot_anuncios % anuncios_por_pagina == 0:
    pag = tot_anuncios/anuncios_por_pagina
    print(pag)
elif tot_anuncios % anuncios_por_pagina != 0:
    pag = int(tot_anuncios/anuncios_por_pagina) + 1
    print(pag)

valor='A parti de R$ /mes     R$ 1650000'
spl=valor.split('/')
spl[1]
if len(spl)!=0:
  valor=spl[1]
valor

#sleep(randint(2, 10))
dmas,ends,complementos,bairros,informantes,telefones,latitudes,longitudes,areas,terrenos,ofertas,idades,datas,conservacoes,padroes,portarias,quartos,banheiros,rendas,totais,coletivas,privativas,esportes,homeclubs,vagas,unitarios, municipios,regionais,fracoes,empresas = ([] for i in range(30))

for page in range(1,pag+1):
  if page>=2:url = url_inicial+"?pagina="+ str(page) 
  else:url = url_inicial
  print(url)
  imovel_div = sp.find_all("div", class_="property-card__content")
  for imovelSection in imovel_div:
    desc = imovelSection.find('span',class_='property-card__title js-cardLink js-card-title').text
    end=imovelSection.find('span',class_='property-card__address').text
    x1 = end.split(',')
    if len(x1)==3: 
      bairro=x1[1].split('-')[1]
    else:
      x2=x1[0].split('-')
      if len(x2)==2:
        bairro=x2[1]
      else:
        bairro=x2[0]
    bairro

    area=imovelSection.find('span',class_='property-card__detail-value js-property-card-value property-card__detail-area js-property-card-detail-area').text
    x=area.split('-')
    if len(x)!=0:area=x[0]
    area=int(area)
    
    quarto=imovelSection.find('li',class_='property-card__detail-item property-card__detail-room js-property-detail-rooms')
    quarto=quarto.find('span','property-card__detail-value js-property-card-value').text
    x=quarto.split('-')
    if len(x)!=0: quarto=x[0]
    quarto=int(quarto)
    
    banheiro=imovelSection.find('li',class_='property-card__detail-item property-card__detail-bathroom js-property-detail-bathroom')
    banheiro=banheiro.find('span','property-card__detail-value js-property-card-value').text
    x=banheiro.split('-')
    if len(x)!=0:banheiro=x[0]
    banheiro=int(banheiro)
    
    vaga=imovelSection.find('li',class_='property-card__detail-item property-card__detail-garage js-property-detail-garages')
    vaga=vaga.find('span','property-card__detail-value js-property-card-value').text
    x=vaga.split('-')
    if len(x)!=0: vaga=x[0]
    #vaga=int(vaga)
    vaga=vaga
    valor=imovelSection.find('div',class_='property-card__price js-property-card-prices js-property-card__price-small').text
    #valor=valor.replace('R$ ','')  
    valor=valor.replace('.','')
    spl=valor.split('/')
    if len(spl)!=1: valor=spl[1]
    pos=valor.find('$')
    valor=valor[pos+2:]
    valor=int(valor)
    #print(bairro,'-',area,'-',quarto,'-',valor)

    dmas.append(today)
    ends.append(end)
    complementos.append(None)
    bairros.append(bairro)
    informantes.append('Viva Real')
    telefones.append(url_inicial)
    latitudes.append(None)
    longitudes.append(None)
    areas.append(area)
    terrenos.append(None)
    ofertas.append(2)
    idades.append(None)
    datas.append(meses)
    conservacoes.append(None)
    padroes.append(4)
    portarias.append(None)
    quartos.append(quarto)
    banheiros.append(banheiro)
    rendas.append(1000)
    totais.append(valor)
    coletivas.append(None)
    privativas.append(None)
    esportes.append(None)
    homeclubs.append(None)
    vagas.append(vaga)
    unitarios.append(valor/area)
    municipios.append(None)
    regionais.append(None)
    fracoes.append(None)
    empresas.append(None)

colunas=["Dma","End","Complemento","Bairro","Informante","Telefone","Latitude","Longitude","Area Privativa","Area Terreno","Oferta/Trans",
         "Idade","Data","Conservação","Padrão","Portaria","Quartos","WCS", "Renda","Valor Total","Piscina Colet","Piscina Priv","Esporte",
         "HomeClub", "Vagas","Valor Unitario","Municipio","Regional","Fração","Empresa"]
df=pd.DataFrame(list(zip(dmas,ends,complementos,bairros,informantes,telefones,latitudes,longitudes,
                         areas,terrenos,ofertas,idades,datas,conservacoes,padroes,portarias,quartos,banheiros,
                         rendas,totais,coletivas,privativas,esportes,homeclubs,vagas,unitarios,
                         municipios,regionais,fracoes,empresas)), columns=colunas)

print(len(df))
df.to_csv('out.csv', index=False)
df.head()